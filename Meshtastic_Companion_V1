//    MESHTASTIC COMPANION
//    Rev. 1.0
//    Copyright: Adrian YO3HJV, feb. 2024



#include <OneWire.h>
#include <SoftwareSerial.h>

#define SERIAL_RX_PIN 3
#define SERIAL_TX_PIN 2
#define DALLAS_PIN 10

#define BAUD_RATE 19200
#define RSTpin  7  // hw is 7

OneWire  ds(DALLAS_PIN);  // on pin 10 (a 4.7K resistor is necessary) Dallas sensor pin
float celsius;
float fahrenheit;

SoftwareSerial sSerial(SERIAL_RX_PIN, SERIAL_TX_PIN); // RX, TX
unsigned long previousMillis_serial = 0;
unsigned long previousMillis_RST = 0; 

        const long serial_interval = 180;   // in minutes *60000 in hours *3600000
        const long RST_interval = 3;  // in hours
//
//3,600,000 msec in an hour

String specificSubstring = "TST";
// Expresia la care vrem ca robotelul sa reactioneze

void setup() {
      pinMode(RSTpin, OUTPUT);
      digitalWrite(RSTpin, HIGH);
      Serial.begin(19200);
      sSerial.begin(BAUD_RATE);
      delay(3000);
      BOOT_RESET();
      delay(5000);
              Serial.println(" BOOT ");
            sSerial.println(" :-) 'neata! Tocmai m-am resetat! ");
            sSerial.print("Interval de anunt al temperaturii: "); sSerial.print(serial_interval); sSerial.println(" minute.");
              Serial.println(" :-) 'neata! Tocmai m-am resetat! ");
        delay(1000);
        BOOT_TEMPERATURE();
             Serial.println(" BOOT TEMPERATURE ");
    
}



void loop() {
            Check_sSerial();
           safety_RESET();
           get_TEMPERATURE();

}

void Check_sSerial(){          
          if (sSerial.available() > 0) {
            
            String receivedString = sSerial.readStringUntil('\n');
      
                    if (receivedString.indexOf(specificSubstring) != -1) {
                          sSerial.print("Robotel te-a auzit!");
                          Serial.print("Tocmai am receptionat ");
                          Serial.println(specificSubstring);
                        }                 
                                
                              }
}

void get_TEMPERATURE(){
  DS_request();
    unsigned long currentMillis_serial = millis();
                if (currentMillis_serial - previousMillis_serial >= serial_interval*60000) {
                      previousMillis_serial = currentMillis_serial;

                      Serial.println(" SEND UART ");
                      sSerial.print("Temperatura exterioara in Bucuresti: ");
                      sSerial.print(celsius, 1);
                      sSerial.println(" *C.");
                 }

}


void DS_request(){
      byte i;
      byte present = 0;
      byte type_s;
      byte data[9];
      byte addr[8];
 
      if ( !ds.search(addr)) {
      // Serial.println("No more addresses.");
      // Serial.println();
        ds.reset_search();
        delay(250);
        return;
      }
  
      //Serial.print("ROM =");
      for( i = 0; i < 8; i++) {
      // Serial.write(' ');
      // Serial.print(addr[i], HEX);
      }

      if (OneWire::crc8(addr, 7) != addr[7]) {
        //  Serial.println("CRC is not valid!");
          return;
      }


      // Serial.println();
      
        // the first ROM byte indicates which chip
        switch (addr[0]) {
          case 0x10:
        //   Serial.println("  Chip = DS18S20");  // or old DS1820
            type_s = 1;
            break;
          case 0x28:
          //  Serial.println("  Chip = DS18B20");
            type_s = 0;
            break;
          case 0x22:
        //    Serial.println("  Chip = DS1822");
            type_s = 0;
            break;
          default:
        //   Serial.println("Device is not a DS18x20 family device.");
            return;
        } 

        ds.reset();
        ds.select(addr);
        ds.write(0x44, 1);        // start conversion, with parasite power on at the end
        
        delay(1000);     // maybe 750ms is enough, maybe not
        // we might do a ds.depower() here, but the reset will take care of it.
        
        present = ds.reset();
        ds.select(addr);    
        ds.write(0xBE);         // Read Scratchpad

      // Serial.print("  Data = ");
      // Serial.print(present, HEX);
      // Serial.print(" ");
        for ( i = 0; i < 9; i++) {           // we need 9 bytes
          data[i] = ds.read();
      //   Serial.print(data[i], HEX);
      //   Serial.print(" ");
        }
      // Serial.print(" CRC=");
      // Serial.print(OneWire::crc8(data, 8), HEX);
      // Serial.println();

        // Convert the data to actual temperature
        // because the result is a 16 bit signed integer, it should
        // be stored to an "int16_t" type, which is always 16 bits
        // even when compiled on a 32 bit processor.
        int16_t raw = (data[1] << 8) | data[0];
        if (type_s) {
          raw = raw << 3; // 9 bit resolution default
          if (data[7] == 0x10) {
            // "count remain" gives full 12 bit resolution
            raw = (raw & 0xFFF0) + 12 - data[6];
          }
        } else {
          byte cfg = (data[4] & 0x60);
          // at lower res, the low bits are undefined, so let's zero them
          if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
          else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
          else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
          //// default is 12 bit resolution, 750 ms conversion time
        }
        celsius = (float)raw / 16.0;
        fahrenheit = celsius * 1.8 + 32.0;

}

void BOOT_RESET(){
                    digitalWrite(RSTpin, LOW);
                    delay(150);
                    digitalWrite(RSTpin, HIGH);
                                        Serial.println(" RESET ");
}


void BOOT_TEMPERATURE(){
  DS_request();
                      sSerial.print("Temperatura exterioara in Bucuresti: ");
                      sSerial.print(celsius, 1);
                      sSerial.println(" *C.");

}

void safety_RESET(){
      unsigned long currentMillis_RST = millis();
      
                if (currentMillis_RST - previousMillis_RST >= RST_interval*3600000UL) {
                      previousMillis_RST = currentMillis_RST;

                  Serial.println(" safety_RESET ");
                    digitalWrite(RSTpin, LOW);
                    delay(100);
                    digitalWrite(RSTpin, HIGH);
                 }

}
